{
    "pipes": [],
    "interfaces": [],
    "injectables": [],
    "guards": [],
    "interceptors": [],
    "classes": [],
    "directives": [],
    "components": [
        {
            "name": "AppComponent",
            "id": "component-AppComponent-1f011f2dbc3c62a11abec263b5c221722c9f7424cbf47de1a68b5f6c9716a8a6d6a42cf7faa3ccb888e012d65d05f00ccb5c940b8ce4729395ca067d0ac8c33c",
            "file": "src/app/app.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-root",
            "styleUrls": [
                "./app.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./app.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "title",
                    "defaultValue": "'angular-eslint-husky-test'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 9
                }
            ],
            "methodsClass": [
                {
                    "name": "test",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 11,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css'],\n})\nexport class AppComponent {\n  title = 'angular-eslint-husky-test';\n\n  test() {\n    console.log('hello');\n    console.log('hello');\n    console.log('hello');\n    console.log('hello');\n    console.log('hello');\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "",
                    "styleUrl": "./app.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<router-outlet></router-outlet>\n"
        },
        {
            "name": "ButtonComponent",
            "id": "component-ButtonComponent-e5c9f88959601c15dc962ecc07ef3682073f422d690544e4a465580cceedc52e7a0d2baec5743a6ec45fd93aaee9d75ab8ab23fb60ad4cc7250a9a82a3544b96",
            "file": "src/app/components/atoms/button/button.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-button",
            "styleUrls": [
                "./button.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./button.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "buttonDisable",
                    "defaultValue": "true",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 15,
                    "type": "boolean",
                    "decorators": []
                },
                {
                    "name": "buttonLabel",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 9,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "buttonType",
                    "defaultValue": "ButtonType.PRIMARY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 13,
                    "type": "ButtonType",
                    "decorators": []
                }
            ],
            "outputsClass": [
                {
                    "name": "onClick",
                    "defaultValue": "new EventEmitter()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 11,
                    "type": "EventEmitter"
                }
            ],
            "propertiesClass": [],
            "methodsClass": [
                {
                    "name": "click",
                    "args": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": ""
                        }
                    ],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 17,
                    "deprecated": false,
                    "deprecationMessage": "",
                    "jsdoctags": [
                        {
                            "name": "event",
                            "type": "any",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "tagName": {
                                "text": "param"
                            }
                        }
                    ]
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, EventEmitter, Input, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-button',\n  templateUrl: './button.component.html',\n  styleUrls: ['./button.component.css'],\n})\nexport class ButtonComponent {\n  @Input() buttonLabel: string = '';\n\n  @Output() onClick = new EventEmitter();\n\n  @Input() buttonType: ButtonType = ButtonType.PRIMARY;\n\n  @Input() buttonDisable: boolean = true;\n\n  click(event: any) {\n    if (this.buttonType === ButtonType.PRIMARY) {\n      this.onClick.emit(event);\n    }\n  }\n}\n\nexport enum ButtonType {\n  PRIMARY = 'primary',\n  ERROR = 'error',\n  LOADING = 'loading',\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": "button {\n  padding: 15px 50px;\n  border-radius: 10px;\n  color: white;\n  font-weight: 800;\n}\n\n.primary {\n  background: #262528;\n}\n\n.primary:hover {\n  opacity: 0.5;\n}\n\n.primary.required {\n  opacity: 0.5;\n}\n\n.error {\n  background: #f6564e;\n}\n\n.error:hover {\n  opacity: 1;\n  cursor: not-allowed;\n}\n\n.primary:disabled {\n  background: #262528;\n  opacity: 0.5;\n}\n\n.primary:disabled:hover {\n  cursor: not-allowed;\n  opacity: 0.5;\n}\n\n.loading {\n  background: #195704;\n  padding: 10px 56px;\n}\n\n.loading .label {\n  display: none;\n}\n\n.loading:hover {\n  opacity: 1;\n  cursor: not-allowed;\n}\n\n.loading::before {\n  content: '';\n  display: flex;\n  width: 10px;\n  height: 10px;\n  padding: 5px;\n  border: 3px solid rgba(255, 255, 255, 0.3);\n  border-radius: 50%;\n  border-top-color: #fff;\n  animation: spin 1s ease-in-out infinite;\n  -webkit-animation: spin 1s ease-in-out infinite;\n}\n\n@keyframes spin {\n  to {\n    -webkit-transform: rotate(360deg);\n  }\n}\n@-webkit-keyframes spin {\n  to {\n    -webkit-transform: rotate(360deg);\n  }\n}\n",
                    "styleUrl": "./button.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<button\n  (click)=\"click($event)\"\n  [ngClass]=\"buttonType\"\n  [disabled]=\"buttonDisable\">\n  <div class=\"label\">{{ buttonLabel }}</div>\n</button>\n"
        },
        {
            "name": "InputComponent",
            "id": "component-InputComponent-95eaf30d56cee0eb84e7d2c65f52d9103d841d992664b59129faa838ee7a83bc3c87f4d5a8acddc860453e8d6fb7a9408d2df17eef24df64e6f15299192a58ac",
            "file": "src/app/components/atoms/input/input.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-input",
            "styleUrls": [
                "./input.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./input.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "className",
                    "defaultValue": "InputType.PRIMARY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 18,
                    "type": "InputType",
                    "decorators": []
                },
                {
                    "name": "control",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 16,
                    "type": "FormControl<any>",
                    "decorators": []
                },
                {
                    "name": "inputType",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 14,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "label",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 10,
                    "type": "string",
                    "decorators": []
                },
                {
                    "name": "placeholder",
                    "defaultValue": "''",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 12,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [],
            "methodsClass": [],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { Component, Input } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n\n@Component({\n  selector: 'app-input',\n  templateUrl: './input.component.html',\n  styleUrls: ['./input.component.css'],\n})\nexport class InputComponent {\n  @Input() label: string = '';\n\n  @Input() placeholder: string = '';\n\n  @Input() inputType: string = '';\n\n  @Input() control!: FormControl<any>;\n\n  @Input() className: InputType = InputType.PRIMARY;\n}\n\nexport enum InputType {\n  PRIMARY = 'primary',\n  ERROR = 'error',\n  LOADING = 'loading',\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".input-container {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.input-container input {\n  width: -webkit-fill-available;\n}\n\n.primary {\n  border: 1px solid darkgray;\n  width: inherit;\n  background-color: whitesmoke;\n}\n\n.error {\n  border: 1px solid #dd3b3b;\n  background-color: #ffe3e2;\n}\n\n.loading {\n  border: 1px solid #2c7312;\n  background: #c7e3bf;\n}\n\n.loading:disabled:hover {\n  cursor: not-allowed;\n}\n",
                    "styleUrl": "./input.component.css"
                }
            ],
            "stylesData": "",
            "templateData": "<div class=\"input-container\">\n  <label>{{ label }}</label>\n  <input\n    [type]=\"inputType\"\n    [class]=\"className\"\n    [placeholder]=\"placeholder\"\n    [formControl]=\"control\"\n    [value]=\"control.value\"\n    [disabled]=\"className === 'loading' ? true : false\" />\n</div>\n"
        },
        {
            "name": "LoginFormComponent",
            "id": "component-LoginFormComponent-8382f9217d6d293f76863efc36798c4d3833c2ebe1d183c92e933f97b7534e30f7f30277915ee0feb1082df0d1db79e4f8e09c9b33c9227e0f280d6832e6af1f",
            "file": "src/app/components/login-form/login-form.component.ts",
            "encapsulation": [],
            "entryComponents": [],
            "inputs": [],
            "outputs": [],
            "providers": [],
            "selector": "app-login-form",
            "styleUrls": [
                "./login-form.component.css"
            ],
            "styles": [],
            "templateUrl": [
                "./login-form.component.html"
            ],
            "viewProviders": [],
            "hostDirectives": [],
            "inputsClass": [
                {
                    "name": "subtitle",
                    "defaultValue": "'Hello, Welcome to my test page!'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "line": 22,
                    "type": "string",
                    "decorators": []
                }
            ],
            "outputsClass": [],
            "propertiesClass": [
                {
                    "name": "buttonDisable",
                    "defaultValue": "false",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "boolean",
                    "optional": false,
                    "description": "",
                    "line": 30
                },
                {
                    "name": "buttonError",
                    "defaultValue": "ButtonType.ERROR",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 19
                },
                {
                    "name": "buttonLabel",
                    "defaultValue": "'Login'",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "string",
                    "optional": false,
                    "description": "",
                    "line": 26
                },
                {
                    "name": "buttonPrimary",
                    "defaultValue": "ButtonType.PRIMARY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 20
                },
                {
                    "name": "buttonType",
                    "defaultValue": "ButtonType.PRIMARY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "ButtonType",
                    "optional": false,
                    "description": "",
                    "line": 24
                },
                {
                    "name": "emailSubscription",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 32
                },
                {
                    "name": "inputClassName",
                    "defaultValue": "InputType.PRIMARY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "InputType",
                    "optional": false,
                    "description": "",
                    "line": 28
                },
                {
                    "name": "inputError",
                    "defaultValue": "InputType.ERROR",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 15
                },
                {
                    "name": "inputLoading",
                    "defaultValue": "InputType.LOADING",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 17
                },
                {
                    "name": "inputPrimary",
                    "defaultValue": "InputType.PRIMARY",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "",
                    "optional": false,
                    "description": "",
                    "line": 16
                },
                {
                    "name": "loginForm",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "FormGroup",
                    "optional": false,
                    "description": "",
                    "line": 13
                },
                {
                    "name": "pwdSubscription",
                    "defaultValue": "new Subscription()",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Subscription",
                    "optional": false,
                    "description": "",
                    "line": 34
                }
            ],
            "methodsClass": [
                {
                    "name": "ngAfterViewInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 48,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "ngOnInit",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 46,
                    "deprecated": false,
                    "deprecationMessage": ""
                },
                {
                    "name": "testClick",
                    "args": [],
                    "optional": false,
                    "returnType": "void",
                    "typeParameters": [],
                    "line": 70,
                    "deprecated": false,
                    "deprecationMessage": ""
                }
            ],
            "deprecated": false,
            "deprecationMessage": "",
            "hostBindings": [],
            "hostListeners": [],
            "standalone": false,
            "imports": [],
            "description": "",
            "rawdescription": "\n",
            "type": "component",
            "sourceCode": "import { AfterViewInit, Component, Input, OnInit } from '@angular/core';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\nimport { Subscription } from 'rxjs';\nimport { ButtonType } from '../atoms/button/button.component';\nimport { InputType } from '../atoms/input/input.component';\n\n@Component({\n  selector: 'app-login-form',\n  templateUrl: './login-form.component.html',\n  styleUrls: ['./login-form.component.css'],\n})\nexport class LoginFormComponent implements OnInit, AfterViewInit {\n  loginForm: FormGroup;\n\n  inputError = InputType.ERROR;\n  inputPrimary = InputType.PRIMARY;\n  inputLoading = InputType.LOADING;\n\n  buttonError = ButtonType.ERROR;\n  buttonPrimary = ButtonType.PRIMARY;\n\n  @Input() subtitle: string = 'Hello, Welcome to my test page!';\n\n  buttonType: ButtonType = ButtonType.PRIMARY;\n\n  buttonLabel: string = 'Login';\n\n  inputClassName: InputType = InputType.PRIMARY;\n\n  buttonDisable: boolean = false;\n\n  emailSubscription: Subscription = new Subscription();\n\n  pwdSubscription: Subscription = new Subscription();\n\n  constructor(private fb: FormBuilder) {\n    this.loginForm = this.fb.group({\n      userId: ['', Validators.email],\n      password: [\n        '',\n        Validators.pattern('^(?=.*[A-Za-z])(?=.*d)[A-Za-zd]{8,}$'),\n      ],\n    });\n  }\n\n  ngOnInit(): void {}\n\n  ngAfterViewInit() {\n    this.emailSubscription = this.loginForm.controls[\n      'userId'\n    ].valueChanges?.subscribe(() => {\n      if (this.loginForm.controls['userId'].errors?.email) {\n        this.buttonType = ButtonType.ERROR;\n      } else {\n        this.buttonType = ButtonType.PRIMARY;\n      }\n    });\n\n    this.pwdSubscription = this.loginForm.controls[\n      'password'\n    ].valueChanges?.subscribe(() => {\n      if (this.loginForm.controls['password'].errors?.pattern) {\n        this.buttonType = ButtonType.ERROR;\n      } else {\n        this.buttonType = ButtonType.PRIMARY;\n      }\n    });\n  }\n\n  testClick() {\n    this.buttonType = ButtonType.LOADING;\n  }\n}\n",
            "assetsDirs": [],
            "styleUrlsData": [
                {
                    "data": ".login-bg {\n  width: 100vw;\n  height: auto;\n  padding: 100px 0;\n  background: #33206c;\n  align-items: center;\n  display: flex;\n  justify-content: center;\n}\n\n.login-form {\n  background: #e3d8e7;\n  width: 70%;\n  height: auto;\n  display: flex;\n  align-items: center;\n  padding: 50px;\n  border-radius: 20px;\n  position: relative;\n}\n\n.form-container {\n  width: 500px;\n  padding: 50px;\n  display: flex;\n  background-color: rgba(245, 245, 245, 0.877);\n  height: auto;\n  border-radius: 20px;\n  z-index: 999;\n  flex-direction: column;\n  gap: 20px;\n  justify-content: center;\n  margin-left: 50px;\n  box-shadow: 10px 10px 46px -26px rgba(0, 0, 0, 0.75);\n}\n\n.form-container .title {\n  margin-bottom: 20px;\n}\n\n.form-container .subtitle {\n  margin-bottom: 20px;\n  line-height: 50px;\n}\n\n.form-container form {\n  display: flex;\n  flex-direction: column;\n  gap: 20px;\n}\n\n.form-container .error {\n  margin-top: -10px;\n  font-size: 12px;\n  color: #9c1313;\n  font-weight: 700;\n}\n\n.img {\n  background-image: url('../../../assets/imgs/privacy.png');\n  background-size: contain;\n  background-repeat: no-repeat;\n  background-position-y: center;\n  background-position-x: right;\n  width: 95%;\n  height: 80%;\n  position: absolute;\n}\n",
                    "styleUrl": "./login-form.component.css"
                }
            ],
            "stylesData": "",
            "constructorObj": {
                "name": "constructor",
                "description": "",
                "deprecated": false,
                "deprecationMessage": "",
                "args": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": ""
                    }
                ],
                "line": 34,
                "jsdoctags": [
                    {
                        "name": "fb",
                        "type": "FormBuilder",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "tagName": {
                            "text": "param"
                        }
                    }
                ]
            },
            "implements": [
                "OnInit",
                "AfterViewInit"
            ],
            "templateData": "<div class=\"login-bg\">\n  <div class=\"login-form\">\n    <div class=\"form-container\">\n      <div class=\"title\">\n        <h1>Sign in</h1>\n      </div>\n      <div class=\"subtitle\">\n        <h3>{{ subtitle }}</h3>\n      </div>\n      <form [formGroup]=\"loginForm\">\n        <app-input\n          data-testid=\"email\"\n          label=\"Email\"\n          placeholder=\"email\"\n          inputType=\"text\"\n          [control]=\"$any(loginForm.controls['userId'])\"\n          [className]=\"\n            buttonType === 'loading'\n              ? inputLoading\n              : loginForm.controls['userId'].errors?.email\n              ? inputError\n              : inputPrimary\n          \"></app-input>\n        <ng-container *ngIf=\"loginForm.controls['userId']?.errors\">\n          <div *ngIf=\"loginForm.controls['userId'].errors\" class=\"error\">\n            Must be a valid Email\n          </div>\n        </ng-container>\n        <app-input\n          data-testid=\"password\"\n          label=\"Password\"\n          placeholder=\"Password\"\n          inputType=\"password\"\n          [className]=\"\n            buttonType === 'loading'\n              ? inputLoading\n              : loginForm.controls['password'].errors\n              ? inputError\n              : inputPrimary\n          \"\n          [control]=\"$any(loginForm.controls['password'])\"></app-input>\n        <ng-container *ngIf=\"loginForm.controls['password']?.errors\">\n          <div\n            *ngIf=\"loginForm.controls['password'].errors?.pattern\"\n            class=\"error\">\n            A minimum of 8 characters required, only letters allowed\n          </div>\n        </ng-container>\n        <div>\n          <app-button\n            [buttonLabel]=\"buttonLabel\"\n            [buttonType]=\"buttonType\"\n            (onClick)=\"testClick()\"\n            [buttonDisable]=\"\n              loginForm.controls['userId'].value === '' ||\n              loginForm.controls['password'].value === ''\n            \"></app-button>\n        </div>\n      </form>\n    </div>\n    <div class=\"img\"></div>\n  </div>\n</div>\n"
        }
    ],
    "modules": [
        {
            "name": "AppModule",
            "id": "module-AppModule-6a7eb39bc3abc07ba4675cdba81bfa44dd6d1b729f56caf2a4e9693bcd1b28da0765b49879e136cd62b6935d327b2dd4da8f07fb5b416afcba2743202b75eaa1",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { BrowserModule } from '@angular/platform-browser';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { InputComponent } from './components/atoms/input/input.component';\nimport { LoginFormComponent } from './components/login-form/login-form.component';\nimport { ButtonComponent } from './components/atoms/button/button.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    InputComponent,\n    LoginFormComponent,\n    ButtonComponent,\n  ],\n  imports: [BrowserModule, AppRoutingModule, FormsModule, ReactiveFormsModule],\n  providers: [],\n  bootstrap: [AppComponent],\n})\nexport class AppModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": [
                        {
                            "name": "AppComponent"
                        },
                        {
                            "name": "ButtonComponent"
                        },
                        {
                            "name": "InputComponent"
                        },
                        {
                            "name": "LoginFormComponent"
                        }
                    ]
                },
                {
                    "type": "imports",
                    "elements": [
                        {
                            "name": "AppRoutingModule"
                        }
                    ]
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": [
                        {
                            "name": "AppComponent"
                        }
                    ]
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        },
        {
            "name": "AppRoutingModule",
            "id": "module-AppRoutingModule-1bf765715a2efd208b5894fcf51e13cbfc7db9cd6f2e140ba0e9070e6a34b8d0d7c217a65a27a7c852f8c2455b17de788403b3698e4f20bdfb08bce6abf73b96",
            "description": "",
            "deprecationMessage": "",
            "deprecated": false,
            "file": "src/app/app-routing.module.ts",
            "methods": [],
            "sourceCode": "import { NgModule } from '@angular/core';\nimport { RouterModule, Routes } from '@angular/router';\nimport { LoginFormComponent } from './components/login-form/login-form.component';\n\nconst routes: Routes = [{ path: 'form', component: LoginFormComponent }];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule],\n})\nexport class AppRoutingModule {}\n",
            "children": [
                {
                    "type": "providers",
                    "elements": []
                },
                {
                    "type": "declarations",
                    "elements": []
                },
                {
                    "type": "imports",
                    "elements": []
                },
                {
                    "type": "exports",
                    "elements": []
                },
                {
                    "type": "bootstrap",
                    "elements": []
                },
                {
                    "type": "classes",
                    "elements": []
                }
            ]
        }
    ],
    "miscellaneous": {
        "variables": [
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/login-form/Login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    buttonLabel: 'LOGIN',\n    buttonType: ButtonType.ERROR,\n    inputClassName: InputType.ERROR,\n  },\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    await step('Input Reset', async () => {\n      canvas.getByTestId('email').getElementsByTagName('input')[0].className =\n        InputType.PRIMARY;\n      canvas.getByRole('button').className = ButtonType.PRIMARY;\n    });\n\n    await step('Enter invalidate email', async () => {\n      await userEvent.type(\n        canvas.getByTestId('email').getElementsByTagName('input')[0],\n        'anything',\n        { delay: 150 }\n      );\n      canvas.getByTestId('email').getElementsByTagName('input')[0].className =\n        InputType.ERROR;\n    });\n\n    await step('Enter invalidate password', async () => {\n      await userEvent.type(\n        canvas.getByTestId('password').getElementsByTagName('input')[0],\n        'a',\n        { delay: 150 }\n      );\n      canvas\n        .getByTestId('password')\n        .getElementsByTagName('input')[0].className = InputType.ERROR;\n    });\n\n    canvas.getByRole('button').className = ButtonType.ERROR;\n  },\n}"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atoms/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    buttonType: ButtonType.ERROR,\n    buttonLabel: 'Button',\n    buttonDisable: true,\n  },\n}"
            },
            {
                "name": "Error",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atoms/input/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'input label',\n    inputType: 'text',\n    placeholder: 'enter anything',\n    className: InputType.ERROR,\n    control: new FormControl('hello'),\n  },\n}"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/login-form/Login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    buttonLabel: 'LOGIN',\n    buttonType: ButtonType.LOADING,\n    inputClassName: InputType.LOADING,\n  },\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    await step('Input Reset', async () => {\n      canvas.getByTestId('email').getElementsByTagName('input')[0].className =\n        InputType.PRIMARY;\n      canvas.getByTestId('email').getElementsByTagName('input')[0].className =\n        InputType.PRIMARY;\n      canvas.getByRole('button').className = ButtonType.PRIMARY;\n    });\n\n    await step('Enter user email', async () => {\n      await userEvent.type(\n        canvas.getByTestId('email').getElementsByTagName('input')[0],\n        'email@provider.com',\n        { delay: 150 }\n      );\n    });\n\n    await step('Enter user password', async () => {\n      await userEvent.type(\n        canvas.getByTestId('password').getElementsByTagName('input')[0],\n        'aabbccdd',\n        { delay: 150 }\n      );\n    });\n\n    await step('Click login button', async () => {\n      await userEvent.click(canvas.getByRole('button'));\n    });\n\n    canvas\n      .getByTestId('email')\n      .getElementsByTagName('input')[0]\n      .setAttribute('disabled', '');\n\n    canvas\n      .getByTestId('password')\n      .getElementsByTagName('input')[0]\n      .setAttribute('disabled', '');\n\n    canvas.getByRole('button').className = ButtonType.LOADING;\n\n    canvas.getByTestId('email').getElementsByTagName('input')[0].className =\n      InputType.LOADING;\n\n    canvas.getByTestId('password').getElementsByTagName('input')[0].className =\n      InputType.LOADING;\n  },\n}"
            },
            {
                "name": "Loading",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atoms/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    buttonType: ButtonType.LOADING,\n    buttonLabel: 'Button',\n    buttonDisable: false,\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/login-form/Login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<LoginFormComponent>",
                "defaultValue": "{\n  title: 'Page/Login',\n  component: LoginFormComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    buttonLabel: {\n      control: 'text',\n      type: 'string',\n      description: 'input label',\n      table: {\n        type: {\n          summary: 'string',\n        },\n      },\n      buttonType: {\n        control: 'select',\n        options: [ButtonType.PRIMARY, ButtonType.LOADING],\n        description: 'Button types',\n        table: {\n          type: {\n            summary: [ButtonType.PRIMARY, ButtonType.LOADING],\n          },\n        },\n      },\n      inputClassName: {\n        control: 'select',\n        options: [InputType.PRIMARY, InputType.LOADING, InputType.ERROR],\n        description: 'Button types',\n        table: {\n          type: {\n            summary: [InputType.PRIMARY, InputType.LOADING, InputType.ERROR],\n          },\n        },\n      },\n    },\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [LoginFormComponent, InputComponent, ButtonComponent],\n      imports: [BrowserModule, FormsModule, ReactiveFormsModule],\n    }),\n  ],\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atoms/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<ButtonComponent>",
                "defaultValue": "{\n  title: 'Atom/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    buttonLabel: {\n      control: 'text',\n      type: 'string',\n      description: 'Button contents',\n      table: {\n        type: {\n          summary: 'string',\n        },\n      },\n    },\n    buttonType: {\n      control: 'select',\n      options: [ButtonType.PRIMARY, ButtonType.LOADING],\n      description: 'Button types',\n      table: {\n        type: {\n          summary: [ButtonType.PRIMARY, ButtonType.LOADING],\n        },\n        defaultValue: { summary: ButtonType.PRIMARY },\n      },\n    },\n  },\n}"
            },
            {
                "name": "meta",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atoms/input/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Meta<InputComponent>",
                "defaultValue": "{\n  title: 'Atom/Input',\n  component: InputComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    label: {\n      control: 'text',\n      type: 'string',\n      description: 'input label',\n      table: {\n        type: {\n          summary: 'string',\n        },\n      },\n    },\n    inputType: {\n      control: 'radio',\n      type: 'string',\n      options: ['email', 'number', 'text'],\n      description: 'input type',\n      table: {\n        type: {\n          summary: 'string',\n        },\n        defaultValue: { summary: 'text' },\n      },\n    },\n    placeholder: {\n      control: 'text',\n      type: 'string',\n      description: 'input placeholder',\n      table: {\n        type: {\n          summary: 'string',\n        },\n        defaultValue: { summary: 'enter something' },\n      },\n    },\n    className: {\n      control: 'select',\n      options: [InputType.PRIMARY, InputType.LOADING],\n      description: 'Input types',\n      table: {\n        type: {\n          summary: [InputType.PRIMARY, InputType.LOADING],\n        },\n        defaultValue: { summary: InputType.PRIMARY },\n      },\n    },\n  },\n}"
            },
            {
                "name": "preview",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": ".storybook/preview.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Preview",
                "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/login-form/Login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    buttonLabel: 'LOGIN',\n    buttonType: ButtonType.PRIMARY,\n    inputClassName: InputType.PRIMARY,\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atoms/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    buttonType: ButtonType.PRIMARY,\n    buttonLabel: 'Button',\n    buttonDisable: true,\n  },\n}"
            },
            {
                "name": "Primary",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atoms/input/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'input label',\n    inputType: 'text',\n    placeholder: 'enter anything',\n    className: InputType.PRIMARY,\n    control: new FormControl('hello'),\n  },\n}"
            },
            {
                "name": "Verify",
                "ctype": "miscellaneous",
                "subtype": "variable",
                "file": "src/app/components/atoms/input/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "type": "Story",
                "defaultValue": "{\n  args: {\n    label: 'input label',\n    inputType: 'text',\n    placeholder: 'enter anything',\n    className: InputType.LOADING,\n    control: new FormControl('hello'),\n  },\n}"
            }
        ],
        "functions": [],
        "typealiases": [
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<LoginFormComponent>",
                "file": "src/app/components/login-form/Login.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<ButtonComponent>",
                "file": "src/app/components/atoms/button/Button.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            },
            {
                "name": "Story",
                "ctype": "miscellaneous",
                "subtype": "typealias",
                "rawtype": "StoryObj<InputComponent>",
                "file": "src/app/components/atoms/input/Input.stories.ts",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "kind": 180
            }
        ],
        "enumerations": [
            {
                "name": "ButtonType",
                "childs": [
                    {
                        "name": "PRIMARY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "primary"
                    },
                    {
                        "name": "ERROR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "error"
                    },
                    {
                        "name": "LOADING",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "loading"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/atoms/button/button.component.ts"
            },
            {
                "name": "InputType",
                "childs": [
                    {
                        "name": "PRIMARY",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "primary"
                    },
                    {
                        "name": "ERROR",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "error"
                    },
                    {
                        "name": "LOADING",
                        "deprecated": false,
                        "deprecationMessage": "",
                        "value": "loading"
                    }
                ],
                "ctype": "miscellaneous",
                "subtype": "enum",
                "deprecated": false,
                "deprecationMessage": "",
                "description": "",
                "file": "src/app/components/atoms/input/input.component.ts"
            }
        ],
        "groupedVariables": {
            "src/app/components/login-form/Login.stories.ts": [
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/login-form/Login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    buttonLabel: 'LOGIN',\n    buttonType: ButtonType.ERROR,\n    inputClassName: InputType.ERROR,\n  },\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    await step('Input Reset', async () => {\n      canvas.getByTestId('email').getElementsByTagName('input')[0].className =\n        InputType.PRIMARY;\n      canvas.getByRole('button').className = ButtonType.PRIMARY;\n    });\n\n    await step('Enter invalidate email', async () => {\n      await userEvent.type(\n        canvas.getByTestId('email').getElementsByTagName('input')[0],\n        'anything',\n        { delay: 150 }\n      );\n      canvas.getByTestId('email').getElementsByTagName('input')[0].className =\n        InputType.ERROR;\n    });\n\n    await step('Enter invalidate password', async () => {\n      await userEvent.type(\n        canvas.getByTestId('password').getElementsByTagName('input')[0],\n        'a',\n        { delay: 150 }\n      );\n      canvas\n        .getByTestId('password')\n        .getElementsByTagName('input')[0].className = InputType.ERROR;\n    });\n\n    canvas.getByRole('button').className = ButtonType.ERROR;\n  },\n}"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/login-form/Login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    buttonLabel: 'LOGIN',\n    buttonType: ButtonType.LOADING,\n    inputClassName: InputType.LOADING,\n  },\n  play: async ({ canvasElement, step }) => {\n    const canvas = within(canvasElement);\n\n    await step('Input Reset', async () => {\n      canvas.getByTestId('email').getElementsByTagName('input')[0].className =\n        InputType.PRIMARY;\n      canvas.getByTestId('email').getElementsByTagName('input')[0].className =\n        InputType.PRIMARY;\n      canvas.getByRole('button').className = ButtonType.PRIMARY;\n    });\n\n    await step('Enter user email', async () => {\n      await userEvent.type(\n        canvas.getByTestId('email').getElementsByTagName('input')[0],\n        'email@provider.com',\n        { delay: 150 }\n      );\n    });\n\n    await step('Enter user password', async () => {\n      await userEvent.type(\n        canvas.getByTestId('password').getElementsByTagName('input')[0],\n        'aabbccdd',\n        { delay: 150 }\n      );\n    });\n\n    await step('Click login button', async () => {\n      await userEvent.click(canvas.getByRole('button'));\n    });\n\n    canvas\n      .getByTestId('email')\n      .getElementsByTagName('input')[0]\n      .setAttribute('disabled', '');\n\n    canvas\n      .getByTestId('password')\n      .getElementsByTagName('input')[0]\n      .setAttribute('disabled', '');\n\n    canvas.getByRole('button').className = ButtonType.LOADING;\n\n    canvas.getByTestId('email').getElementsByTagName('input')[0].className =\n      InputType.LOADING;\n\n    canvas.getByTestId('password').getElementsByTagName('input')[0].className =\n      InputType.LOADING;\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/login-form/Login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<LoginFormComponent>",
                    "defaultValue": "{\n  title: 'Page/Login',\n  component: LoginFormComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    buttonLabel: {\n      control: 'text',\n      type: 'string',\n      description: 'input label',\n      table: {\n        type: {\n          summary: 'string',\n        },\n      },\n      buttonType: {\n        control: 'select',\n        options: [ButtonType.PRIMARY, ButtonType.LOADING],\n        description: 'Button types',\n        table: {\n          type: {\n            summary: [ButtonType.PRIMARY, ButtonType.LOADING],\n          },\n        },\n      },\n      inputClassName: {\n        control: 'select',\n        options: [InputType.PRIMARY, InputType.LOADING, InputType.ERROR],\n        description: 'Button types',\n        table: {\n          type: {\n            summary: [InputType.PRIMARY, InputType.LOADING, InputType.ERROR],\n          },\n        },\n      },\n    },\n  },\n  decorators: [\n    moduleMetadata({\n      declarations: [LoginFormComponent, InputComponent, ButtonComponent],\n      imports: [BrowserModule, FormsModule, ReactiveFormsModule],\n    }),\n  ],\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/login-form/Login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    buttonLabel: 'LOGIN',\n    buttonType: ButtonType.PRIMARY,\n    inputClassName: InputType.PRIMARY,\n  },\n}"
                }
            ],
            "src/app/components/atoms/button/Button.stories.ts": [
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atoms/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    buttonType: ButtonType.ERROR,\n    buttonLabel: 'Button',\n    buttonDisable: true,\n  },\n}"
                },
                {
                    "name": "Loading",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atoms/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    buttonType: ButtonType.LOADING,\n    buttonLabel: 'Button',\n    buttonDisable: false,\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atoms/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<ButtonComponent>",
                    "defaultValue": "{\n  title: 'Atom/Button',\n  component: ButtonComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    buttonLabel: {\n      control: 'text',\n      type: 'string',\n      description: 'Button contents',\n      table: {\n        type: {\n          summary: 'string',\n        },\n      },\n    },\n    buttonType: {\n      control: 'select',\n      options: [ButtonType.PRIMARY, ButtonType.LOADING],\n      description: 'Button types',\n      table: {\n        type: {\n          summary: [ButtonType.PRIMARY, ButtonType.LOADING],\n        },\n        defaultValue: { summary: ButtonType.PRIMARY },\n      },\n    },\n  },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atoms/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    buttonType: ButtonType.PRIMARY,\n    buttonLabel: 'Button',\n    buttonDisable: true,\n  },\n}"
                }
            ],
            "src/app/components/atoms/input/Input.stories.ts": [
                {
                    "name": "Error",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atoms/input/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'input label',\n    inputType: 'text',\n    placeholder: 'enter anything',\n    className: InputType.ERROR,\n    control: new FormControl('hello'),\n  },\n}"
                },
                {
                    "name": "meta",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atoms/input/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Meta<InputComponent>",
                    "defaultValue": "{\n  title: 'Atom/Input',\n  component: InputComponent,\n  tags: ['autodocs'],\n  argTypes: {\n    label: {\n      control: 'text',\n      type: 'string',\n      description: 'input label',\n      table: {\n        type: {\n          summary: 'string',\n        },\n      },\n    },\n    inputType: {\n      control: 'radio',\n      type: 'string',\n      options: ['email', 'number', 'text'],\n      description: 'input type',\n      table: {\n        type: {\n          summary: 'string',\n        },\n        defaultValue: { summary: 'text' },\n      },\n    },\n    placeholder: {\n      control: 'text',\n      type: 'string',\n      description: 'input placeholder',\n      table: {\n        type: {\n          summary: 'string',\n        },\n        defaultValue: { summary: 'enter something' },\n      },\n    },\n    className: {\n      control: 'select',\n      options: [InputType.PRIMARY, InputType.LOADING],\n      description: 'Input types',\n      table: {\n        type: {\n          summary: [InputType.PRIMARY, InputType.LOADING],\n        },\n        defaultValue: { summary: InputType.PRIMARY },\n      },\n    },\n  },\n}"
                },
                {
                    "name": "Primary",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atoms/input/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'input label',\n    inputType: 'text',\n    placeholder: 'enter anything',\n    className: InputType.PRIMARY,\n    control: new FormControl('hello'),\n  },\n}"
                },
                {
                    "name": "Verify",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": "src/app/components/atoms/input/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Story",
                    "defaultValue": "{\n  args: {\n    label: 'input label',\n    inputType: 'text',\n    placeholder: 'enter anything',\n    className: InputType.LOADING,\n    control: new FormControl('hello'),\n  },\n}"
                }
            ],
            ".storybook/preview.ts": [
                {
                    "name": "preview",
                    "ctype": "miscellaneous",
                    "subtype": "variable",
                    "file": ".storybook/preview.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "type": "Preview",
                    "defaultValue": "{\n  parameters: {\n    actions: { argTypesRegex: '^on[A-Z].*' },\n    controls: {\n      matchers: {\n        color: /(background|color)$/i,\n        date: /Date$/,\n      },\n    },\n  },\n}"
                }
            ]
        },
        "groupedFunctions": {},
        "groupedEnumerations": {
            "src/app/components/atoms/button/button.component.ts": [
                {
                    "name": "ButtonType",
                    "childs": [
                        {
                            "name": "PRIMARY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "primary"
                        },
                        {
                            "name": "ERROR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "error"
                        },
                        {
                            "name": "LOADING",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "loading"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/atoms/button/button.component.ts"
                }
            ],
            "src/app/components/atoms/input/input.component.ts": [
                {
                    "name": "InputType",
                    "childs": [
                        {
                            "name": "PRIMARY",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "primary"
                        },
                        {
                            "name": "ERROR",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "error"
                        },
                        {
                            "name": "LOADING",
                            "deprecated": false,
                            "deprecationMessage": "",
                            "value": "loading"
                        }
                    ],
                    "ctype": "miscellaneous",
                    "subtype": "enum",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "file": "src/app/components/atoms/input/input.component.ts"
                }
            ]
        },
        "groupedTypeAliases": {
            "src/app/components/login-form/Login.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<LoginFormComponent>",
                    "file": "src/app/components/login-form/Login.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/components/atoms/button/Button.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<ButtonComponent>",
                    "file": "src/app/components/atoms/button/Button.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ],
            "src/app/components/atoms/input/Input.stories.ts": [
                {
                    "name": "Story",
                    "ctype": "miscellaneous",
                    "subtype": "typealias",
                    "rawtype": "StoryObj<InputComponent>",
                    "file": "src/app/components/atoms/input/Input.stories.ts",
                    "deprecated": false,
                    "deprecationMessage": "",
                    "description": "",
                    "kind": 180
                }
            ]
        }
    },
    "routes": {
        "name": "<root>",
        "kind": "module",
        "className": "AppModule",
        "children": [
            {
                "name": "routes",
                "filename": "src/app/app-routing.module.ts",
                "module": "AppRoutingModule",
                "children": [
                    {
                        "path": "form",
                        "component": "LoginFormComponent"
                    }
                ],
                "kind": "module"
            }
        ]
    },
    "coverage": {
        "count": 0,
        "status": "low",
        "files": [
            {
                "filePath": ".storybook/preview.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "preview",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/app.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "AppComponent",
                "coveragePercent": 0,
                "coverageCount": "0/3",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atoms/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atoms/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atoms/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atoms/button/Button.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atoms/button/button.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "ButtonComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atoms/input/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atoms/input/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atoms/input/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atoms/input/Input.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Verify",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/atoms/input/input.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "InputComponent",
                "coveragePercent": 0,
                "coverageCount": "0/6",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login-form/Login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Error",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login-form/Login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Loading",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login-form/Login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "meta",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login-form/Login.stories.ts",
                "type": "variable",
                "linktype": "miscellaneous",
                "linksubtype": "variable",
                "name": "Primary",
                "coveragePercent": 0,
                "coverageCount": "0/1",
                "status": "low"
            },
            {
                "filePath": "src/app/components/login-form/login-form.component.ts",
                "type": "component",
                "linktype": "component",
                "name": "LoginFormComponent",
                "coveragePercent": 0,
                "coverageCount": "0/18",
                "status": "low"
            }
        ]
    }
}